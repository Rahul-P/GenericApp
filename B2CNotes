// Sample: https://localhost:44315/api/applications?takeRows=3
        [HttpGet]
        public async Task<ActionResult<InputModels.Application[]>> GetApplications(int skipRows = Misc.Constants.ZERO, 
            int takeRows = Misc.Constants.TWENTY) =>
            await TryCatch.SanitiseInput<int, int, Option<Error>>
                ((_skipRows, _takeRows) =>   // Check/Validate supplied Input Data, act accordingly.
                {
                    if (_takeRows >= Misc.Constants.THREE && _takeRows <= Misc.Constants.TWO_FIFTY_FIVE
                        && _skipRows >= Misc.Constants.ZERO)
                    {
                        return new None<Error>();
                    }
                    return new B2CBroker.Data.Errors.InvalidInput(Misc.Constants.Error_InvalidInputLengthForTakeAndSkip);
                },
                (e, l) =>   // Exception occured while parsing/sanitising supplied input data, handle and revert to cleint.
                {
                    return new B2CBroker.Data.Errors.InvalidInput(Misc.Constants.Error_InvalidInput);
                },
                () =>
                {
                    // Finally Block.
                },
                skipRows, takeRows)
                .ProcessOnNoneAsync<Error, ActionResult>
                    ((e) => // We have encountered Sanitisation Error, return the Information to Client.
                    {
                        string _errorMessage = e is B2CBroker.Data.Errors.InvalidInput
                            ? e is B2CBroker.Data.Errors.InvalidInput i
                                ? i._reason
                                : Misc.Constants.Message_ApplicationNotFound
                            : Misc.Constants.Message_ApplicationNotFound;

                        return Task.FromResult((ActionResult)base.BadRequest(_errorMessage));
                    },
                    async () => // Real Code - Goes in this Async Lambda.           
                        (await TryCatch.ProcessBusinessTaskAsync<Either<Error, B2CBroker.Domain.Application[]>>
                            (
                                // Business Method to Run, when validation Succeeds.
                                _orchestrator.GetApplications(string.Empty, FetchCurrentAuthenticatedUser(),
                                    _repo, Misc.Constants.FALSE, skipRows, takeRows),                
                            (e, l) =>
                            {   // We have encountered exception in one of the Business Method(s)/Layers, relay sophisticated information back to client.
                                return new B2CBroker.Data.Errors.NoDataFound(Misc.Constants.Message_NoDataFound);
                            },
                            () =>
                            {
                                // Finally Block.
                            })
                            .ConfigureAwait(Misc.Constants.FALSE))
                        .Map(r => r != null 
                                ? (ActionResult)Ok(_mapper.Map<InputModels.Application[]>(r)) 
                                : (ActionResult)base.NotFound(Misc.Constants.Message_NoDataFound))
                        .Reduce(_ => base.NotFound(Misc.Constants.Message_NoDataFound), 
                            error => error is B2CBroker.Data.Errors.ApplicationNotFound)
                        .Reduce(_ => (ActionResult)InternalServerError()));
